---
layout:     post
title:     Welcome to Bash Programming
author:     Geraldo Braho
tags: 		Bash
subtitle:  	A Introduction to bash Language( My notes from my programming language class)
category:  
share: true
comments: true
---
<!-- Start Writing Below in Markdown -->

# Table of Contents

* TOC
{:toc}





# What is Bash Language

BASH is an acronym for Bourne Again Shell. It is based on the Bourne shell and is mostly compatible with its features.

Shells are command interpreters. They are applications that provide users with the ability to give commands to their operating system interactively, or to execute batches of commands quickly. In no way are they required for the execution of programs; they are merely a layer between system function calls and the user.

Think of a shell as a way for you to speak to your system. Your system doesn't need it for most of its work, but it is an excellent interface between you and what your system can offer. It allows you to perform basic math, run basic tests and execute applications. More importantly, it allows you to combine these operations and connect applications to each other to perform complex and automated tasks.

BASH is not your operating system. It is not your window manager. It is not your terminal (but it often runs inside your terminal). It does not control your mouse or keyboard. It does not configure your system, activate your screensaver, or open your files when you double-click them. It is generally not involved in launching applications from your window manager or desktop environment. It's important to understand that BASH is only an interface for you to execute statements (using BASH syntax), either at the interactive BASH prompt or via BASH scripts.


These are algorithms that students are expected to understand  for A- Level Computing. It is very useful to be able to implement them in a programing language to understand more fully how they work.



# Introduction

To run bash scripts we can just easily run our terminal and start writing the script we want to run.
To print the famous "Hello World" in bash we just easily type:


{% highlight BASH %}

echo "Hello World"

{% endhighlight %}

***Output : Hello Word***




It is not necessary to use the the quotation marks in Bash but since I am used to other languages as well I like to use it in Bash too:



{% highlight BASH %}

echo "Hello World"

{% endhighlight %}

***Output : Hello Word***



Creating Variables in Bash is easy too. We can Create Variables like:

{% highlight BASH %}

VARIABLE_1="Hello World"

echo $VARIABLE_1


{% endhighlight %}

***Output: Hello World***


To call out VARIABLE_1 that we just created in out print statement we should make sure that we use the **$** before the variable.
Also we can add additional variables or string to the variable that we just created by using the **{ }**:



{% highlight BASH %}

VARIABLE_1="Hello World"

echo ${VARIABLE_1} "Nice to be starting learning Bash"


{% endhighlight %}


***Output : Hello World Nice to be starting learning Bash***

***Note:*** Variables in Bash are case-sensitive.


## Valid variable names:
* FIRST3LETTERS="ABC"
* FIRST_THREE_LETTERS="ABC"
* firstThreeLetters="ABC"

## Invalid variable names:

* 3LETTERS="ABC"
* first-three-letters="ABC"
* first@Three@Letters="ABC"



## If Statement in Bash:

Here is a model to show you  how to run statements in Bash Language:


{% highlight BASH %}

if [ condition -is-true ]
then
     command 1
     command 2
     command N
fi

{% endhighlight %}

So as we see, even in Bash as in other programing languages the statement starts with "if", then we give the condition like **(2=2)** . After writing the condition notice that we write **then**. The **then** word here all what it does is like saying " Okay since i got the condition now let's do this"

### Remember:

1. we give the condition
2. write **then** to tell that we are done with the condition, and based on condition we will do this, which can be ( Increment , decrement ect).

After writing the commands notice that also the loop finishes with **fi** What does this *fi* do ? So basically **fi** stands for if but backwards. The way how I  understood is "Okay .. we are finish with this statement so lest close it ". So, **fi** at the ends just closes that operation in our case its closes the "if statement"

**Example**


{% highlight BASH %}

MY_NAME="Geraldo"
if [ "$MY_NAME" = "Geraldo" ]
then
    echo "Hello Geraldo :)  You seem to like Bash Language."

fi

{% endhighlight %}


Also make sure that after the **[  ]** make sure you leave one space between the brackets & quotation marks otherwise you will get an error like this :

{% highlight BASH %}

bash: [: missing ']'

{% endhighlight %}


 **Output:** Hello Geraldo :)  You seem to like Bash Language.



## Exercise 1 (Solve me First From Hackerrank)

Welcome to HackerRank! The purpose of this challenge is to familiarize you with reading input from stdin (the standard input stream) and writing output to stdout (the standard output stream) using our environment.

Review the code provided in the editor below, then complete the solveMeFirst function so that it returns the sum of two integers read from stdin. Take some time to understand this code so you're prepared to write it yourself in future challenges.

Select a language below, and start coding!

**Input Format**

Code that reads input from stdin is provided for you in the editor. There are 2 lines of input, and each line contains a single integer.

**Output Format**

Code that prints the sum calculated and returned by solveMeFirst is provided for you in the editor

**Solution**

{% highlight BASH %}

read a
read b
echo $(($a + $b))



{% endhighlight %}
